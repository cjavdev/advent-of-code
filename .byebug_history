c
n
@bits
n
@sum_versions
n
@og_bits
@bits
n
step
n
@read
pos
n
p length
n
c
n
type_id
version
n
q
n
done
n
number
n
@bits
n
step
n
type_id
n
@og_bits
@bits
n
q
@og_bits
@bits
n
@bits
@og_bits
q
read_bits(3)
n
@bits
type_id
version
n
q
@bits.join
n
@bits
length_type
n
type_id
@sum_versions
n
@bits.join
n
@bits.join
@bits
q
length
pos
q
number.join.to_i(2)
number.join
n
number
c
n
q
@number
number_bits
@bits
c
@bits
number_bits
done
q
number
q
p @bits
@bits
q
number
c
n
number
n
number
n
number
n
q
number
n
c
n
number.join.to_i(2)
number
n
number
n
q
n
done
number
n
@bits
n
@bits
n
q
c
v4.version
v3.version
v2.version
v1.version
sub2.version
sub1.version
packet4.version
q
v2.version
v1.version
sub1.version
sub2.version
packet4.version
c
q
c
q
bits
n
length_type
c
length_type
c
length_type
c
length_type
c
length_type
c
n
packets.map(&:value)
packets
n
start
n
q
stop
start
n
bits[start...stop]
stop
start
n
start
packet.end_index
packet.value
packet
n
stop
start
n
c
n
bits[start...stop]
stop
start
packets
n
c
n
bits[start+packet.end_index...stop]
stop
start
packets[0].value
packets
packet.value
packet.literal?
n
c
q
packet.end_index
packet.value
n
bits[22+packet.end_index...current]
n
b 38
packet.literal?
n
packet.value
packet.bits
packet.end_index
n
bits[22...current]
n
c
n
q
x
rest
q
rest.join.to_i(2)
rest
q
p @risk_levels.length
p @risk_levels
c
n
b 78
size
q
c
q
c
q
n
l=
size
p rl[0].length
p rl.length
n
p s
p height
p s
p width
q
c
val
q
puts cell + s
puts cell
puts s
val
q
c
p @risk_levels
c
p @risk_levels
c
p @risk_levels
c
p @risk_levels
c
p @risk_levels
n
p val2
n
p @risk_levels
n
p @risk_levels
n

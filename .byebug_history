p current
n
c
n
p g_score
n
p @closed.count
p @open.count
n
p @nodes[[1, 1]].heuristic_distance
p current.heuristic_distance
p current.pos
n
p g_score
n
p g_score
n
b 82
p current.neighbors.count
n
q
p current.neighbors.count
p @closed.length
p @open.length
n
q
c
p x.heuristic_distance
p x.value
p x.pos
n
@open.length
step
@open
step
q
c
n
p current_value
p current_location
n
c
p queue
c
p current_value
p current_location
n
c
p visited
p current_location
n
p visited
n
c
p aggregate
n
p v
p n
n
p visited
p n
n
current_value
neighbor_value
c
b 43
current_value
current_location
n
c
n
q
current_location
n
c
n
q
queue
queue.empty?
n
c
n
current_value + neighbor_value
p [x, y]
@aggregate[x][y]
q
p n
@aggregate[n]
p current_location
current_value
c
p x - (j - x)
p [i, j]
c
@grid
n
p [i, j]
q
p [i - (@grid.length - 1)]
p @grid.length
p i - @grid.length
p [i, j]
c
cell 1
c
b 42
p [i, j]
c
cell
c
p [i, j]
cell
c
step
label
q
c
p paths
n
p paths
current
n
p paths
n
p paths
n
to_visit
p paths
n
p paths
current
n
p paths
n
p paths
n
q
c
current
n
@routes[current]
current
n
to_visit
n
current
n
c
@routes
n
quit
@routes
n
from
@routes
c
puts [i, j]
c
puts i, j
q
c
n
puts @energy_levels.map {|x|x.join}.join("\n")
p @energy_levels.map {|x|x.join}.join("\n")
p @energy_levels.map {|x|x.join}
p @energy_levels.map {_1.join}
p @energy_levels
puts @energy_levels
puts i, j
n
puts i, j
n
delete 17
c
b 22
n
puts i, j
n
puts i, j
n
puts i, j
n
puts i, j
n
puts i
i
row
n
b 17
b 16
c
n
@energy_levels
n
@energy_levels
q
c
quit
c
puts j
puts i
@energy_levels[i][j]
puts j
puts i
c
n
sorted_scores
n
incomplete_lines
c
@lines.first.illegal_char
@lines.first.corrupted?
@lines
incomplete_lines
c
@lines
c
q
c
char
PTS2[char]
PTS[char]
score
n
score
b 58
n
c
illegal_char
c
basin_points
n
basin_points
c
n
basin_points
n
basin_points
c
basin_points
n
quit
basin_points
points
n
candidates
n
points
current
n
points
n
c
segments.freq.find {|k, v| v == 9}[0]
segments.freq.find {|k, v| v == 9}
segments.freq

c
segments.freq.find {|k, v| v == 9}[0]
segments.freq.find {|k, v| v == 9}
segments.freq
q
c
n
top_right
possible
n
c
@mapping.find_index("bceg")
@mapping.find_index("bcdefg")
@mapping.find_index("bcdef")
@mapping
output
c
output
q
c
possibility.chars - four.chars
possibility == six
possibility
c
possible.first.chars.count
possible.first.chars - four.chars
nine
possible
six
possible[1].chars - four.chars
possible.last.chars - four.chars
possible.first.chars - four.chars
possible.first.chars
four.chars
four
possible
n
c
seven.chars.reject {[top_right, bottom_right].include?(_1)}[0]
seven.chars.reject {[top_right, bottom_right].include?(_1)}
c
seven.chars
seven
bottom_right
top_right
seven.split
seven
c
q
c
q
c
point_fuels
c
point_fuels
c
q
c
point_fuels
l=
c
q
c
point_fuels
c
min_fuel
n
l=
max
min
positions
distance
align_point
pos
point_fuels
c
point_fuels
c
point_fuels
c
point_fuels
c
positions
point_fuels
c
min_fuel
point_fuels
c
point_fuels
c
point_fuels
c
min_fuel
point_fuels
align_point
c
max
min
n
positions
continue
quit
ages
c
ages
c
ages
c
ages
n
c
ages
n
ages
n
births
ages
n
ages
births
n
births
n
births
ages[7]
ages
n
ages
births
n
continue
c
n
puts x1, y1
x1, y1
n
y_dir
x_dir
n
c
n
c
n
y_dir
x_dir
y2
x2
y1
x1
n
c
floor.rows
n
puts x, y
x, y
c
continue
c
board
c
boards
boars
c
boards
c
boards
c
step
winning_board
winning_board?
n
b 13
step
board
c
step
n
numbers
c
included_measurements
right
n
left
n
left
included_measurements
mid
puts i
c
puts i
c
left
n
mid[i]
puts i
included_measurements
mid
n
included_measurements
n
included_measurements
n
q
c
puts mid[i]
puts left
puts i
puts mid
included_measurements
n
left
n
puts i
included_measurements
n
q
c
right
n
puts i
i
mid[i]
mid
q
mid[i]
puts included_measurements
included_measurements
mid
q
puts mid
puts included_measurements
puts mid
puts mid[i]
left
right
puts mid
puts mid[i]
l=
puts included_measurements
puts mid
puts mid[i]
n
puts i
n
left
mid[i]
puts i
i
n
puts measurement_bits
p measurement_bits
c
n
included_measurements
n
included_measurements
